# Configuration file

calibration {
    # Modifies the way ambient occlusion alignment is calculated. Used for compatibility purposes,
    # because different graphics cards have different ways of processing quads.
    # This is useful when quad triangulation is disabled, or if the triangulator gets disabled internally
    # for compatibility reasons. [default: false]
    B:FLIP_DIAGONALS=false

    # The SHA256 hash of the graphics card that this calibration was configured for. [default: undefined]
    S:GPU_HASH=a9dd0aff67b38f5416a7b18f7f2c2aa606c1075e063431fdbccc9b1ee08eb9fc
}


general {
    # Beacons also have an optimization using renderlists. If you spot any issues related to beacons,
    # you can toggle said optimization here. [default: true]
    B:ENABLE_BEACON_OPTIMIZATION=true

    # In vanilla code, dropped and held items are re-rendered every frame, generating a lot of
    # unnecessary CPU load because of the very inefficient way the rendering is done.
    # With this enabled, Triangulator will cache pre-rendered versions of items into RenderLists
    # (same things that chunks use) to minimize the amount of work done by the cpu for every single item.
    # Notice: Turn this off if you notice any weird rendering artifacts with items, as this feature
    # is still highly experimental.
    #  [default: true]
    B:ENABLE_ITEM_RENDERLISTS=true

    # Used to toggle the namesake feature of this mod: quad triangulation.
    # If you turn this off, the triangulation will not execute, but you will still have the AO and the
    # smooth lighting fixes.
    # Triangulation fixes an issue with incorrectly-aligned quads causing a minor visual bug, however,
    # on weaker systems, it may noticeably decrease render performance (integrated graphics).
    # By sacrificing a bit of visual quality, you might get back a few extra FPS depending on your system. [default: true]
    B:ENABLE_QUAD_TRIANGULATION=true

    # The total amount of renderlists Triangulator may allocate for optimized item rendering.
    # When the limit is exceeded, the render list that was used the longest time ago gets released.
    # Bigger buffer sizes use more VRAM, but also get a higher average performance.
    # 256 should be good enough for most modded games, and going above 1024 is not recommended unless
    # you have a lot of VRAM.
    # (Only useful if you have ENABLE_ITEM_RENDERLISTS turned on) [range: 64 ~ 2147483647, default: 256]
    I:ITEM_RENDERLIST_BUFFER_MAX_SIZE=256

    # Another renderlist tweak. Minecraft preallocates 55 thousand renderlists for the chunk rendering.
    # The main advantage of this is reduced buffer allocations, so theoretically, it's faster.
    # Unfortunately, by not clearing these buffers, they start leaking a LOT of memory over time,
    # which gets emphasized on modern AMD windows drivers, and on MESA with linux. This patch
    # Replaces the preallocated block by a dynamic allocation system, with each chunk creating and
    # deleting these renderlists based on usage. Requires a game restart to apply.
    # NOTICE FOR OPTIFINE USERS:
    # Setting this to Auto or Enable blocks Smooth and Multi-Core chunkloading. If you want multicore chunkloading,
    # you MUST set this do Disable.
    # Possible values: [Disable, Auto, Enable]
    #  [default: Auto]
    S:MEMORY_LEAK_FIX=Auto

    # The memory leak optimization unfortunately increases the amount of calls sent to the GPU.
    # This pressure can be reduced with the help of caching, which temporarily stores inactive renderlists
    # in a buffer, where renderers can then fetch them from when needed.
    # You can set this to any value above zero, but setting it too high will eat a LOT of VRAM. 1024 is
    # a decent safe point. [range: 0 ~ 2147483647, default: 1024]
    I:MEMORY_LEAK_FIX_CACHE_SIZE_TARGET=1024
}


